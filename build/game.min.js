;(function(backgammon){var rand1=backgammon.rand1;var rand2=backgammon.rand2;backgammon.game=(function(){"use strict";var moveid=backgammon.sequence("move");var Move=function(die,source,target,hit){this.id=moveid();this.die=die;this.source=source;this.target=target;this.hit=hit;this.used=0;this.candidate=-999;};var gameid=backgammon.sequence("game");var Game=function(config){var self=this;self.id=gameid();self.wtm=true;self.rolls=[];self.moves=[];self.okmoves=[];self.movenum=0;self.pieces={white:new Array(24),black:new Array(24),offwhite:0,offblack:0,barwhite:0,barblack:0};self.toroll=null;self.board=config.ui||null;self.white=config.white||null;self.black=config.black||null;self.delay=config.delay||null;self.setup(config.position);if(self.white){self.white.init(self);}
if(self.black){self.black.init(self);}};Game.prototype.setup=function(positionstring){var self=this;var posarray=(positionstring||backgammon.defaults.position).toUpperCase().split(' ');var position=self.position=posarray[0];var c,n,p=23,i=0,l=position.length;var D='/'.charCodeAt(0),W='W'.charCodeAt(0),B='B'.charCodeAt(0);self.pieces.offwhite=0;self.pieces.offblack=0;self.pieces.barwhite=0;self.pieces.barblack=0;while(i<l&&p>-1){c=position.charCodeAt(i);n=position.charCodeAt(i+1);self.pieces.white[p]=0;self.pieces.black[p]=0;if(c===D){p--;}else if(n&&(c>=49||c<=57)){self.pieces.white[p]=n===W?c-48:0;self.pieces.black[p]=n===B?c-48:0;i++;p--;}
i++;}
self.wtm=(posarray[1]||'W')==='W';positionstring=posarray[2]||'00';self.pieces.barwhite=parseInt(positionstring.charAt(0),16);self.pieces.barblack=parseInt(positionstring.charAt(1),16);self.fullmove=parseInt(posarray[3]||'0');positionstring=posarray[4]||'00';if(positionstring!=='00'){self.toroll={die1:parseInt(positionstring.charAt(0)),die2:parseInt(positionstring.charAt(1))};}};Game.prototype.start=function(){var self=this;if(self.toroll){self.roll(self.toroll.die1,self.toroll.die2);self.toroll=null;}else{self.roll();}};Game.prototype.toString=function(){var self=this;var pos="";var whites=self.pieces.white;var blacks=self.pieces.black;var wtot=self.pieces.barwhite,btot=self.pieces.barblack;for(var point=23;point>=0;point--){if(whites[point])pos+=whites[point]+'W';else if(blacks[point])pos+=blacks[point]+'B';else pos+='/';wtot+=whites[point];btot+=blacks[point];}
pos+=' ';pos+=self.wtm?'W':'B';pos+=' ';pos+=self.pieces.barwhite;pos+=self.pieces.barblack;pos+=' ';pos+=self.fullmove;pos+=' ';pos+=self.rolls[self.movenum]?self.rolls[self.movenum].die1:'0';pos+=self.rolls[self.movenum]?self.rolls[self.movenum].die2:'0';return pos;};Game.prototype.point=function(p){var self=this;switch(p){case-1:return self.pieces.barblack;case 24:return self.pieces.barwhite;case 999:return self.canclear()!==false?1:0;default:return self.wtm?self.pieces.white[p]:self.pieces.black[p];}};Game.prototype.pointcolor=function(p){var self=this;switch(p){case-1:return self.wtm?false:true;case 24:return self.wtm?true:false;case 999:return self.canclear()!==false;default:return(self.pieces.white[p]&&self.wtm)||(self.pieces.black[p]&&!self.wtm);}};Game.prototype.nextmove=function(){var self=this;if(self.delay){setTimeout(function(){if(!self.wtm)self.fullmove++;self.wtm=!self.wtm;self.movenum++;self.roll();},self.delay);}else{if(!self.wtm)self.fullmove++;self.wtm=!self.wtm;self.movenum++;self.roll();}};Game.prototype.canmove=function(){var self=this;var okmoves=self.okmoves[self.movenum];var okmove=null;for(var i=0,l=okmoves.length;i<l;i++){okmove=okmoves[i];if(self.okmove(okmove.source,okmove.target)&&!okmove.moved)return true;}
return false;};Game.prototype.haswon=function(){var self=this;if(self.wtm&&self.pieces.barwhite>0)return false;if(!self.wtm&&self.pieces.barblack>0)return false;var pieces=self.wtm?self.pieces.white:self.pieces.black;for(var i=0,l=pieces.length;i<l;i++){if(pieces[i]>0)return false;}
return true;};Game.prototype.move=function(okmove){var self=this;var player=self.wtm?'white':'black';var waiter=self.wtm?'black':'white';okmove.color=player;okmove.roll=self.rolls[self.movenum];okmove.notation=' '+self.movenum+'.'+okmove.source+'/'+okmove.target;switch(okmove.source){case-1:self.pieces.barblack--;break;case 24:self.pieces.barwhite--;break;default:self.pieces[player][okmove.source]--;};self.pieces[player][okmove.target]++;if(okmove.hit){self.pieces[waiter][okmove.target]--;self.pieces['bar'+waiter]++;okmove.notation+='*';}
if(okmove.roll.die1===okmove.die)okmove.roll.used1++;else if(okmove.roll.die2===okmove.die)okmove.roll.used2++;self.moves.push(okmove);self.okmoves[self.movenum].moved=(self.okmoves[self.movenum].moved||0)+1;if(self.board)self.board.update(okmove);if(self.haswon()){console.log('WINNER!',self.id,player);self.winner=player;return null;}else if(self.okmoves[self.movenum].moved>(self.rolls[self.movenum].doubles?3:1)){self.nextmove();}else if(!self.canmove()){self.nextmove();}
return okmove;};Game.prototype.roll=function(die1,die2){var self=this;var roll=self.rolls[self.movenum];if(!roll){die1=parseInt(die1);die2=parseInt(die2);var val1=(!isNaN(die1)&&die1>=1&&die1<=6)?die1:rand2(1,6);var val2=(!isNaN(die2)&&die2>=1&&die2<=6)?die2:rand2(1,6);var roll={die1:val1,die2:val2,used1:0,used2:0,doubles:val1===val2,color:self.wtm?'white':'black'}
self.rolls[self.movenum]=roll;self.generatemoves();if(self.okmoves[self.movenum].length===0){self.nextmove();}}
if(self.board)self.board.onroll(roll);if(self.white)self.white.onroll(roll);if(self.black)self.black.onroll(roll);return roll;};Game.prototype.onbar=function(){var self=this;return((self.wtm&&self.pieces.barwhite>0)||(!self.wtm&&self.pieces.barblack>0));};Game.prototype.canclear=function(){var self=this;if(self.onbar())return false;var begin=self.wtm?6:0;var end=self.wtm?24:18;var pieces=self.wtm?self.pieces.white:self.pieces.black;for(var point=begin;point<end;point++)if(pieces[point]>0)return false;if(self.wtm){for(var point=5;point>=0;point--){if(pieces[point]>0)return point;}}else{for(var point=19;point<=23;point++){if(pieces[point]>0)return point;}}
return self.wtm?0:23;};Game.prototype.generatemoves=function(){var self=this;var moves=[];var roll=self.rolls[self.movenum];var die1=roll.die1;var die2=roll.die2;var die0;var player=self.wtm?self.pieces.white:self.pieces.black;var waiter=self.wtm?self.pieces.black:self.pieces.white;var direction=self.wtm?-1:1;var hittarget0,hittarget1,hittarget2,hittarget3,hittarget4;var oktarget0,oktarget1,oktarget2,oktarget3,oktarget4;var target0,target1,target2,target3,target4;var possible,doublesource,barsource,bartarget,bardie;if(self.onbar()){barsource=self.wtm?24:-1;for(var d=1;d<3;d++){bardie=(d===1?die1:die2)
bartarget=self.wtm?Math.abs(bardie-24):bardie-1;if(waiter[bartarget]<2){hittarget0=waiter[bartarget]===1?true:false;possible=new Move(bardie,barsource,bartarget,hittarget0);moves.push(possible);die0=(d===1?die2:die1)
target0=self.wtm?bartarget-die0:bartarget+die0;if(waiter[target0]<2){hittarget0=waiter[target0]===1?true:false;possible=new Move(die0,bartarget,target0,hittarget0);moves.push(possible);}}}
if(!moves.length){self.okmoves[self.movenum]=moves;return moves;}}
var check=function(source,target,die){if((0<=target&&target<=23)&&(waiter[target]<2)){var hit=waiter[target]===1?true:false;var possible=new Move(die,source,target,hit);moves.push(possible);return true;}
return false;}
for(var point=0;point<24;point++){oktarget1=false;oktarget2=false;oktarget3=false;if(player[point]>0){if(!roll.doubles){target1=point+die1*direction;target2=point+die2*direction;target3=point+die1*direction+die2*direction;oktarget1=check(point,target1,die1);oktarget2=check(point,target2,die2);if(oktarget1)oktarget3=check(target1,target3,die2);if(oktarget2)oktarget4=check(target2,target3,die1);}else{doublesource=point;target4=point+die1*direction;for(var d=0;d<4;d++){if(check(doublesource,target4,die1)){doublesource+=die1*direction;target4+=die1*direction;}}}}}
var canclear=self.canclear();if(canclear!==false){var greater=false;var maxdie=Math.max(roll.die1,roll.die2);var mindie=Math.min(roll.die1,roll.die2);if(self.wtm){var diepoint;var pieces=self.pieces.white;for(var point=canclear;point>=0;point--){diepoint=point+1;if(pieces[point]>0){if(!roll.doubles){if(diepoint===maxdie||(!greater&&diepoint<maxdie)){var possible=new Move(maxdie,point,999,false);moves.push(possible);}
if(diepoint===mindie){var possible=new Move(mindie,point,999,false);moves.push(possible);}}else{if(diepoint===roll.die1||(!greater&&diepoint<maxdie)){for(var i=0;i<4;i++){var possible=new Move(roll.die1,point,999,false);moves.push(possible);}}}
greater=true;}}}else{var diepoint;var pieces=self.pieces.black;for(var point=canclear;point<=23;point++){diepoint=24-point;if(pieces[point]>0){if(!roll.doubles){if(diepoint===maxdie||(!greater&&diepoint<maxdie)){var possible=new Move(maxdie,point,999,false);moves.push(possible);}
if(diepoint===mindie){var possible=new Move(mindie,point,999,false);moves.push(possible);}}else{if(diepoint===roll.die1||(!greater&&diepoint<maxdie)){for(var i=0;i<4;i++){var possible=new Move(roll.die1,point,999,false);moves.push(possible);}}}
greater=true;}}}}
self.okmoves[self.movenum]=moves;return moves;};Game.prototype.okmove=function(source,target){var self=this;source=parseInt(source);target=parseInt(target);var canclear=self.canclear()!==false&&target===999;if(isNaN(source)||isNaN(target)||source<-1||source>24||target<0||(target>24&&!canclear))return false;var pieces=self.wtm?self.pieces.white:self.pieces.black;if(self.onbar()){if(self.wtm&&source!==24)return null;if(!self.wtm&&source!==-1)return null;}else if(!pieces[source]){return null;}
var okmove=null;var okmoves=self.okmoves[self.movenum];var roll=self.rolls[self.movenum];var dist=Math.abs(target-source);var clear=self.wtm?source:24-source;var max=roll.doubles?3:1;var dist1=dist===roll.die1;var dist2=dist===roll.die2;var used1=roll.used1<max;var used2=roll.used2<max;var clear1=canclear&&clear<=roll.die1;var clear2=canclear&&clear<=roll.die2;if(((dist1||clear1)&&used1)||((dist2||clear2)&&used2)){for(var i=0,l=okmoves.length;i<l;i++){var move=okmoves[i];if(move.source===source&&move.target===target&&(move.used<max)){if(dist1||clear1){okmove=move;break;}else if(dist2||clear2){okmove=move;break;}}}}
return okmove;};var api=function(config){return new Game(config||{});};return api;})();})(backgammon);